
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'right=EQUALPLUSEQUALMINUSEQUALMULTIPLEEQUALDIVIDEEQUALnonassoc<>ISLESSOREQUALISMOREOREQUALISNOTEQUALleft+-DOTPLUSDOTMINUSleft*/DOTMULTIPLEDOTDIVIDEBREAK COMMENT CONTINUE DIVIDEEQUAL DOTDIVIDE DOTMINUS DOTMULTIPLE DOTPLUS ELSE EQUAL EYE FLOAT FOR ID IF INT ISEQUAL ISLESSOREQUAL ISMOREOREQUAL ISNOTEQUAL MINUSEQUAL MULTIPLEEQUAL ONES PLUSEQUAL PRINT RETURN STRING WHILE ZEROSprogram : instructionsinstructions : instructions instruction\n                    | instructioninstruction : assignment\n                    | for_instruction\n                    | while_instruction\n                    | if_instruction\n                    | operation\n                    | print_instruction\n                    | break_instruction\n                    | continue_instruction\n                    | return_instruction\n                    | compound_instruction\n                    | assignment_operationassignment : ID \'=\' operation \';\'\n                    | ID \'[\' INT \',\' INT \']\' \'=\' operation \';\'\n                    | ID \'=\' \'[\' rows \']\' \';\'\n                    | ID \'=\' zeros \';\'\n                    | ID \'=\' ones \';\'\n                    | ID \'=\' eye \';\' zeros : ZEROS \'(\' INT \')\' ones : ONES \'(\' INT \')\' eye : EYE \'(\' INT \')\' rows : nums\n                    | rows \';\' nums nums : num\n                    | nums \',\' num for_instruction : FOR iterator instruction while_instruction : WHILE \'(\' bool_expression \')\' instruction if_instruction : IF \'(\' bool_expression \')\' instruction\n                    | IF \'(\' bool_expression \')\' instruction ELSE instructionprint_instruction : PRINT operation \';\'\n                    | PRINT operation \',\' operation \';\'\n                    | PRINT num \';\' operation : num\n                    | ID\n                    | \'-\' ID\n                    | ID "\'"\n                    | \'(\' operation \')\'\n                    | operation \'+\' operation\n                    | operation \'-\' operation\n                    | operation \'*\' operation\n                    | operation \'/\' operation\n                    | operation DOTMINUS operation\n                    | operation DOTPLUS operation\n                    | operation DOTMULTIPLE operation\n                    | operation DOTDIVIDE operation break_instruction : BREAK \';\' continue_instruction : CONTINUE \';\' return_instruction : RETURN operation \';\'\n                    | RETURN \';\' compound_instruction : \'{\' instructions \'}\'iterator : ID \'=\' int_or_id \':\' int_or_id int_or_id : ID\n                    | INT num : STRING\n                    | FLOAT\n                    | INT bool_expression : ID\n                    | operation EQUAL operation\n                    | operation \'<\' operation\n                    | operation \'>\' operation\n                    | operation ISLESSOREQUAL operation\n                    | operation ISMOREOREQUAL operation\n                    | operation ISNOTEQUAL operationassignment_operation : ID PLUSEQUAL operation \';\'\n                    | ID MINUSEQUAL operation \';\'\n                    | ID MULTIPLEEQUAL operation \';\'\n                    | ID DIVIDEEQUAL operation \';\' '
    
_lr_action_items = {'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,21,22,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,48,50,51,52,55,56,58,59,60,61,62,63,64,65,66,67,81,82,86,88,89,90,91,92,93,97,98,99,104,105,106,107,108,110,111,112,113,114,115,116,117,118,127,128,135,136,137,144,145,146,147,149,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-36,-58,47,50,-35,52,50,50,15,-56,-57,-2,50,50,50,50,50,50,50,50,50,-38,50,50,50,50,15,84,-36,84,-37,-48,-49,-51,15,-40,-41,-42,-43,-44,-45,-46,-47,-28,108,-39,-32,50,-34,-50,-52,-15,-18,-19,-20,-66,-67,-68,-69,-54,-55,15,50,50,50,50,50,50,15,108,-29,-30,-33,-17,-53,15,50,-31,-16,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,27,28,29,30,41,46,50,52,55,56,58,59,60,61,62,63,64,65,66,67,81,86,88,90,91,92,93,97,98,99,104,105,106,107,108,110,111,118,128,135,136,137,144,145,147,149,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-36,-58,-35,17,-56,-57,-2,-38,17,-36,-37,-48,-49,-51,17,-40,-41,-42,-43,-44,-45,-46,-47,-28,-39,-32,-34,-50,-52,-15,-18,-19,-20,-66,-67,-68,-69,-54,-55,17,17,-29,-30,-33,-17,-53,17,-31,-16,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,27,28,29,30,41,46,50,52,55,56,58,59,60,61,62,63,64,65,66,67,81,86,88,90,91,92,93,97,98,99,104,105,106,107,108,110,111,118,128,135,136,137,144,145,147,149,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-36,-58,-35,18,-56,-57,-2,-38,18,-36,-37,-48,-49,-51,18,-40,-41,-42,-43,-44,-45,-46,-47,-28,-39,-32,-34,-50,-52,-15,-18,-19,-20,-66,-67,-68,-69,-54,-55,18,18,-29,-30,-33,-17,-53,18,-31,-16,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,27,28,29,30,41,46,50,52,55,56,58,59,60,61,62,63,64,65,66,67,81,86,88,90,91,92,93,97,98,99,104,105,106,107,108,110,111,118,128,135,136,137,144,145,147,149,],[20,20,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-36,-58,-35,20,-56,-57,-2,-38,20,-36,-37,-48,-49,-51,20,-40,-41,-42,-43,-44,-45,-46,-47,-28,-39,-32,-34,-50,-52,-15,-18,-19,-20,-66,-67,-68,-69,-54,-55,20,20,-29,-30,-33,-17,-53,20,-31,-16,]),'-':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,21,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,77,78,79,80,81,84,85,86,88,89,90,91,92,93,97,98,99,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,128,129,130,131,132,133,134,135,136,137,144,145,146,147,148,149,],[22,22,-3,-4,-5,-6,-7,32,-9,-10,-11,-12,-13,-14,-36,-58,22,-35,22,22,22,-56,-57,-2,22,22,22,22,22,22,22,22,22,-38,22,22,22,22,22,22,32,-36,22,-37,32,-35,-48,-49,32,-51,22,-40,-41,-42,-43,-44,-45,-46,-47,32,32,32,32,32,-28,-36,32,-39,-32,22,-34,-50,-52,-15,-18,-19,-20,-66,-67,-68,-69,-54,-55,22,22,22,22,22,22,22,22,32,-29,32,32,32,32,32,32,-30,-33,-17,-53,22,22,-31,32,-16,]),'(':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,48,50,51,52,55,56,58,59,60,61,62,63,64,65,66,67,73,74,75,81,86,88,89,90,91,92,93,97,98,99,104,105,106,107,108,110,111,112,113,114,115,116,117,118,128,135,136,137,144,145,146,147,149,],[19,19,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-36,-58,48,19,51,-35,19,19,19,-56,-57,-2,19,19,19,19,19,19,19,19,19,-38,19,19,19,19,19,19,-36,19,-37,-48,-49,-51,19,-40,-41,-42,-43,-44,-45,-46,-47,100,101,102,-28,-39,-32,19,-34,-50,-52,-15,-18,-19,-20,-66,-67,-68,-69,-54,-55,19,19,19,19,19,19,19,19,-29,-30,-33,-17,-53,19,19,-31,-16,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,27,28,29,30,41,46,50,52,55,56,58,59,60,61,62,63,64,65,66,67,81,86,88,90,91,92,93,97,98,99,104,105,106,107,108,110,111,118,128,135,136,137,144,145,147,149,],[23,23,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-36,-58,-35,23,-56,-57,-2,-38,23,-36,-37,-48,-49,-51,23,-40,-41,-42,-43,-44,-45,-46,-47,-28,-39,-32,-34,-50,-52,-15,-18,-19,-20,-66,-67,-68,-69,-54,-55,23,23,-29,-30,-33,-17,-53,23,-31,-16,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,27,28,29,30,41,46,50,52,55,56,58,59,60,61,62,63,64,65,66,67,81,86,88,90,91,92,93,97,98,99,104,105,106,107,108,110,111,118,128,135,136,137,144,145,147,149,],[24,24,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-36,-58,-35,24,-56,-57,-2,-38,24,-36,-37,-48,-49,-51,24,-40,-41,-42,-43,-44,-45,-46,-47,-28,-39,-32,-34,-50,-52,-15,-18,-19,-20,-66,-67,-68,-69,-54,-55,24,24,-29,-30,-33,-17,-53,24,-31,-16,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,27,28,29,30,41,46,50,52,55,56,58,59,60,61,62,63,64,65,66,67,81,86,88,90,91,92,93,97,98,99,104,105,106,107,108,110,111,118,128,135,136,137,144,145,147,149,],[25,25,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-36,-58,-35,25,-56,-57,-2,-38,25,-36,-37,-48,-49,-51,25,-40,-41,-42,-43,-44,-45,-46,-47,-28,-39,-32,-34,-50,-52,-15,-18,-19,-20,-66,-67,-68,-69,-54,-55,25,25,-29,-30,-33,-17,-53,25,-31,-16,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,27,28,29,30,41,46,50,52,55,56,58,59,60,61,62,63,64,65,66,67,81,86,88,90,91,92,93,97,98,99,104,105,106,107,108,110,111,118,128,135,136,137,144,145,147,149,],[26,26,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-36,-58,-35,26,-56,-57,-2,-38,26,-36,-37,-48,-49,-51,26,-40,-41,-42,-43,-44,-45,-46,-47,-28,-39,-32,-34,-50,-52,-15,-18,-19,-20,-66,-67,-68,-69,-54,-55,26,26,-29,-30,-33,-17,-53,26,-31,-16,]),'{':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,27,28,29,30,41,46,50,52,55,56,58,59,60,61,62,63,64,65,66,67,81,86,88,90,91,92,93,97,98,99,104,105,106,107,108,110,111,118,128,135,136,137,144,145,147,149,],[27,27,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-36,-58,-35,27,-56,-57,-2,-38,27,-36,-37,-48,-49,-51,27,-40,-41,-42,-43,-44,-45,-46,-47,-28,-39,-32,-34,-50,-52,-15,-18,-19,-20,-66,-67,-68,-69,-54,-55,27,27,-29,-30,-33,-17,-53,27,-31,-16,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,21,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,48,50,51,52,55,56,58,59,60,61,62,63,64,65,66,67,69,81,86,88,89,90,91,92,93,97,98,99,104,105,106,107,108,110,111,112,113,114,115,116,117,118,121,122,128,135,136,137,144,145,146,147,149,],[28,28,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-36,-58,28,-35,28,28,28,-56,-57,-2,28,28,28,28,28,28,28,28,28,-38,28,28,28,28,28,28,-36,28,-37,-48,-49,-51,28,-40,-41,-42,-43,-44,-45,-46,-47,28,-28,-39,-32,28,-34,-50,-52,-15,-18,-19,-20,-66,-67,-68,-69,-54,-55,28,28,28,28,28,28,28,28,28,28,-29,-30,-33,-17,-53,28,28,-31,-16,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,21,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,48,50,51,52,55,56,58,59,60,61,62,63,64,65,66,67,69,81,86,88,89,90,91,92,93,97,98,99,104,105,106,107,108,110,111,112,113,114,115,116,117,118,121,122,128,135,136,137,144,145,146,147,149,],[29,29,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-36,-58,29,-35,29,29,29,-56,-57,-2,29,29,29,29,29,29,29,29,29,-38,29,29,29,29,29,29,-36,29,-37,-48,-49,-51,29,-40,-41,-42,-43,-44,-45,-46,-47,29,-28,-39,-32,29,-34,-50,-52,-15,-18,-19,-20,-66,-67,-68,-69,-54,-55,29,29,29,29,29,29,29,29,29,29,-29,-30,-33,-17,-53,29,29,-31,-16,]),'INT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,21,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,50,51,52,55,56,58,59,60,61,62,63,64,65,66,67,69,81,82,86,88,89,90,91,92,93,97,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,121,122,127,128,135,136,137,144,145,146,147,149,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-36,-58,16,-35,16,16,16,-56,-57,-2,16,16,16,16,16,16,16,16,16,76,-38,16,16,16,16,16,16,-36,16,-37,-48,-49,-51,16,-40,-41,-42,-43,-44,-45,-46,-47,16,-28,110,-39,-32,16,-34,-50,-52,-15,-18,-19,-20,123,124,125,126,-66,-67,-68,-69,-54,-55,16,16,16,16,16,16,16,16,16,16,110,-29,-30,-33,-17,-53,16,16,-31,-16,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,28,29,30,41,50,52,55,56,58,60,61,62,63,64,65,66,67,81,86,88,90,91,92,93,97,98,99,104,105,106,107,128,135,136,137,147,149,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-36,-58,-35,-56,-57,-2,-38,-36,-37,-48,-49,-51,-40,-41,-42,-43,-44,-45,-46,-47,-28,-39,-32,-34,-50,-52,-15,-18,-19,-20,-66,-67,-68,-69,-29,-30,-33,-17,-31,-16,]),'}':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,28,29,30,41,50,52,55,56,58,59,60,61,62,63,64,65,66,67,81,86,88,90,91,92,93,97,98,99,104,105,106,107,128,135,136,137,147,149,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-36,-58,-35,-56,-57,-2,-38,-36,-37,-48,-49,-51,92,-40,-41,-42,-43,-44,-45,-46,-47,-28,-39,-32,-34,-50,-52,-15,-18,-19,-20,-66,-67,-68,-69,-29,-30,-33,-17,-31,-16,]),'ELSE':([4,5,6,7,8,9,10,11,12,13,14,15,16,21,28,29,41,50,52,55,56,58,60,61,62,63,64,65,66,67,81,86,88,90,91,92,93,97,98,99,104,105,106,107,128,135,136,137,147,149,],[-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-36,-58,-35,-56,-57,-38,-36,-37,-48,-49,-51,-40,-41,-42,-43,-44,-45,-46,-47,-28,-39,-32,-34,-50,-52,-15,-18,-19,-20,-66,-67,-68,-69,-29,145,-33,-17,-31,-16,]),'+':([8,15,16,21,28,29,41,49,50,52,53,54,57,60,61,62,63,64,65,66,67,68,77,78,79,80,84,85,86,119,129,130,131,132,133,134,148,],[31,-36,-58,-35,-56,-57,-38,31,-36,-37,31,-35,31,-40,-41,-42,-43,-44,-45,-46,-47,31,31,31,31,31,-36,31,-39,31,31,31,31,31,31,31,31,]),'*':([8,15,16,21,28,29,41,49,50,52,53,54,57,60,61,62,63,64,65,66,67,68,77,78,79,80,84,85,86,119,129,130,131,132,133,134,148,],[33,-36,-58,-35,-56,-57,-38,33,-36,-37,33,-35,33,33,33,-42,-43,33,33,-46,-47,33,33,33,33,33,-36,33,-39,33,33,33,33,33,33,33,33,]),'/':([8,15,16,21,28,29,41,49,50,52,53,54,57,60,61,62,63,64,65,66,67,68,77,78,79,80,84,85,86,119,129,130,131,132,133,134,148,],[34,-36,-58,-35,-56,-57,-38,34,-36,-37,34,-35,34,34,34,-42,-43,34,34,-46,-47,34,34,34,34,34,-36,34,-39,34,34,34,34,34,34,34,34,]),'DOTMINUS':([8,15,16,21,28,29,41,49,50,52,53,54,57,60,61,62,63,64,65,66,67,68,77,78,79,80,84,85,86,119,129,130,131,132,133,134,148,],[35,-36,-58,-35,-56,-57,-38,35,-36,-37,35,-35,35,-40,-41,-42,-43,-44,-45,-46,-47,35,35,35,35,35,-36,35,-39,35,35,35,35,35,35,35,35,]),'DOTPLUS':([8,15,16,21,28,29,41,49,50,52,53,54,57,60,61,62,63,64,65,66,67,68,77,78,79,80,84,85,86,119,129,130,131,132,133,134,148,],[36,-36,-58,-35,-56,-57,-38,36,-36,-37,36,-35,36,-40,-41,-42,-43,-44,-45,-46,-47,36,36,36,36,36,-36,36,-39,36,36,36,36,36,36,36,36,]),'DOTMULTIPLE':([8,15,16,21,28,29,41,49,50,52,53,54,57,60,61,62,63,64,65,66,67,68,77,78,79,80,84,85,86,119,129,130,131,132,133,134,148,],[37,-36,-58,-35,-56,-57,-38,37,-36,-37,37,-35,37,37,37,-42,-43,37,37,-46,-47,37,37,37,37,37,-36,37,-39,37,37,37,37,37,37,37,37,]),'DOTDIVIDE':([8,15,16,21,28,29,41,49,50,52,53,54,57,60,61,62,63,64,65,66,67,68,77,78,79,80,84,85,86,119,129,130,131,132,133,134,148,],[38,-36,-58,-35,-56,-57,-38,38,-36,-37,38,-35,38,38,38,-42,-43,38,38,-46,-47,38,38,38,38,38,-36,38,-39,38,38,38,38,38,38,38,38,]),'=':([15,47,143,],[39,82,146,]),'[':([15,39,],[40,69,]),"'":([15,50,84,],[41,41,41,]),'PLUSEQUAL':([15,],[42,]),'MINUSEQUAL':([15,],[43,]),'MULTIPLEEQUAL':([15,],[44,]),'DIVIDEEQUAL':([15,],[45,]),')':([16,21,28,29,41,49,50,52,60,61,62,63,64,65,66,67,83,84,86,87,123,124,125,129,130,131,132,133,134,],[-58,-35,-56,-57,-38,86,-36,-37,-40,-41,-42,-43,-44,-45,-46,-47,111,-59,-39,118,140,141,142,-60,-61,-62,-63,-64,-65,]),';':([16,21,24,25,26,28,29,41,50,52,53,54,57,60,61,62,63,64,65,66,67,68,70,71,72,77,78,79,80,86,94,95,96,119,120,138,139,140,141,142,148,],[-58,-35,55,56,58,-56,-57,-38,-36,-37,88,90,91,-40,-41,-42,-43,-44,-45,-46,-47,93,97,98,99,104,105,106,107,-39,121,-24,-26,136,137,-25,-27,-21,-22,-23,149,]),',':([16,21,28,29,41,50,52,53,54,60,61,62,63,64,65,66,67,76,86,95,96,138,139,],[-58,-35,-56,-57,-38,-36,-37,89,-35,-40,-41,-42,-43,-44,-45,-46,-47,103,-39,122,-26,122,-27,]),'EQUAL':([16,21,28,29,41,50,52,60,61,62,63,64,65,66,67,84,85,86,],[-58,-35,-56,-57,-38,-36,-37,-40,-41,-42,-43,-44,-45,-46,-47,-36,112,-39,]),'<':([16,21,28,29,41,50,52,60,61,62,63,64,65,66,67,84,85,86,],[-58,-35,-56,-57,-38,-36,-37,-40,-41,-42,-43,-44,-45,-46,-47,-36,113,-39,]),'>':([16,21,28,29,41,50,52,60,61,62,63,64,65,66,67,84,85,86,],[-58,-35,-56,-57,-38,-36,-37,-40,-41,-42,-43,-44,-45,-46,-47,-36,114,-39,]),'ISLESSOREQUAL':([16,21,28,29,41,50,52,60,61,62,63,64,65,66,67,84,85,86,],[-58,-35,-56,-57,-38,-36,-37,-40,-41,-42,-43,-44,-45,-46,-47,-36,115,-39,]),'ISMOREOREQUAL':([16,21,28,29,41,50,52,60,61,62,63,64,65,66,67,84,85,86,],[-58,-35,-56,-57,-38,-36,-37,-40,-41,-42,-43,-44,-45,-46,-47,-36,116,-39,]),'ISNOTEQUAL':([16,21,28,29,41,50,52,60,61,62,63,64,65,66,67,84,85,86,],[-58,-35,-56,-57,-38,-36,-37,-40,-41,-42,-43,-44,-45,-46,-47,-36,117,-39,]),']':([16,28,29,94,95,96,126,138,139,],[-58,-56,-57,120,-24,-26,143,-25,-27,]),'ZEROS':([39,],[73,]),'ONES':([39,],[74,]),'EYE':([39,],[75,]),':':([108,109,110,],[-54,127,-55,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,27,],[2,59,]),'instruction':([0,2,27,46,59,111,118,145,],[3,30,3,81,30,128,135,147,]),'assignment':([0,2,27,46,59,111,118,145,],[4,4,4,4,4,4,4,4,]),'for_instruction':([0,2,27,46,59,111,118,145,],[5,5,5,5,5,5,5,5,]),'while_instruction':([0,2,27,46,59,111,118,145,],[6,6,6,6,6,6,6,6,]),'if_instruction':([0,2,27,46,59,111,118,145,],[7,7,7,7,7,7,7,7,]),'operation':([0,2,19,23,26,27,31,32,33,34,35,36,37,38,39,42,43,44,45,46,48,51,59,89,111,112,113,114,115,116,117,118,145,146,],[8,8,49,53,57,8,60,61,62,63,64,65,66,67,68,77,78,79,80,8,85,85,8,119,8,129,130,131,132,133,134,8,8,148,]),'print_instruction':([0,2,27,46,59,111,118,145,],[9,9,9,9,9,9,9,9,]),'break_instruction':([0,2,27,46,59,111,118,145,],[10,10,10,10,10,10,10,10,]),'continue_instruction':([0,2,27,46,59,111,118,145,],[11,11,11,11,11,11,11,11,]),'return_instruction':([0,2,27,46,59,111,118,145,],[12,12,12,12,12,12,12,12,]),'compound_instruction':([0,2,27,46,59,111,118,145,],[13,13,13,13,13,13,13,13,]),'assignment_operation':([0,2,27,46,59,111,118,145,],[14,14,14,14,14,14,14,14,]),'num':([0,2,19,23,26,27,31,32,33,34,35,36,37,38,39,42,43,44,45,46,48,51,59,69,89,111,112,113,114,115,116,117,118,121,122,145,146,],[21,21,21,54,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,96,21,21,21,21,21,21,21,21,21,96,139,21,21,]),'iterator':([17,],[46,]),'zeros':([39,],[70,]),'ones':([39,],[71,]),'eye':([39,],[72,]),'bool_expression':([48,51,],[83,87,]),'rows':([69,],[94,]),'nums':([69,121,],[95,138,]),'int_or_id':([82,127,],[109,144,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','Mparser.py',31),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Mparser.py',35),
  ('instructions -> instruction','instructions',1,'p_instructions','Mparser.py',36),
  ('instruction -> assignment','instruction',1,'p_instruction','Mparser.py',45),
  ('instruction -> for_instruction','instruction',1,'p_instruction','Mparser.py',46),
  ('instruction -> while_instruction','instruction',1,'p_instruction','Mparser.py',47),
  ('instruction -> if_instruction','instruction',1,'p_instruction','Mparser.py',48),
  ('instruction -> operation','instruction',1,'p_instruction','Mparser.py',49),
  ('instruction -> print_instruction','instruction',1,'p_instruction','Mparser.py',50),
  ('instruction -> break_instruction','instruction',1,'p_instruction','Mparser.py',51),
  ('instruction -> continue_instruction','instruction',1,'p_instruction','Mparser.py',52),
  ('instruction -> return_instruction','instruction',1,'p_instruction','Mparser.py',53),
  ('instruction -> compound_instruction','instruction',1,'p_instruction','Mparser.py',54),
  ('instruction -> assignment_operation','instruction',1,'p_instruction','Mparser.py',55),
  ('assignment -> ID = operation ;','assignment',4,'p_assignment','Mparser.py',59),
  ('assignment -> ID [ INT , INT ] = operation ;','assignment',9,'p_assignment','Mparser.py',60),
  ('assignment -> ID = [ rows ] ;','assignment',6,'p_assignment','Mparser.py',61),
  ('assignment -> ID = zeros ;','assignment',4,'p_assignment','Mparser.py',62),
  ('assignment -> ID = ones ;','assignment',4,'p_assignment','Mparser.py',63),
  ('assignment -> ID = eye ;','assignment',4,'p_assignment','Mparser.py',64),
  ('zeros -> ZEROS ( INT )','zeros',4,'p_zeros','Mparser.py',73),
  ('ones -> ONES ( INT )','ones',4,'p_ones','Mparser.py',77),
  ('eye -> EYE ( INT )','eye',4,'p_eye','Mparser.py',81),
  ('rows -> nums','rows',1,'p_rows','Mparser.py',85),
  ('rows -> rows ; nums','rows',3,'p_rows','Mparser.py',86),
  ('nums -> num','nums',1,'p_nums','Mparser.py',94),
  ('nums -> nums , num','nums',3,'p_nums','Mparser.py',95),
  ('for_instruction -> FOR iterator instruction','for_instruction',3,'p_for_instruction','Mparser.py',103),
  ('while_instruction -> WHILE ( bool_expression ) instruction','while_instruction',5,'p_while_instruction','Mparser.py',107),
  ('if_instruction -> IF ( bool_expression ) instruction','if_instruction',5,'p_if_instruction','Mparser.py',111),
  ('if_instruction -> IF ( bool_expression ) instruction ELSE instruction','if_instruction',7,'p_if_instruction','Mparser.py',112),
  ('print_instruction -> PRINT operation ;','print_instruction',3,'p_print_instruction','Mparser.py',119),
  ('print_instruction -> PRINT operation , operation ;','print_instruction',5,'p_print_instruction','Mparser.py',120),
  ('print_instruction -> PRINT num ;','print_instruction',3,'p_print_instruction','Mparser.py',121),
  ('operation -> num','operation',1,'p_operation','Mparser.py',128),
  ('operation -> ID','operation',1,'p_operation','Mparser.py',129),
  ('operation -> - ID','operation',2,'p_operation','Mparser.py',130),
  ("operation -> ID '",'operation',2,'p_operation','Mparser.py',131),
  ('operation -> ( operation )','operation',3,'p_operation','Mparser.py',132),
  ('operation -> operation + operation','operation',3,'p_operation','Mparser.py',133),
  ('operation -> operation - operation','operation',3,'p_operation','Mparser.py',134),
  ('operation -> operation * operation','operation',3,'p_operation','Mparser.py',135),
  ('operation -> operation / operation','operation',3,'p_operation','Mparser.py',136),
  ('operation -> operation DOTMINUS operation','operation',3,'p_operation','Mparser.py',137),
  ('operation -> operation DOTPLUS operation','operation',3,'p_operation','Mparser.py',138),
  ('operation -> operation DOTMULTIPLE operation','operation',3,'p_operation','Mparser.py',139),
  ('operation -> operation DOTDIVIDE operation','operation',3,'p_operation','Mparser.py',140),
  ('break_instruction -> BREAK ;','break_instruction',2,'p_break_instruction','Mparser.py',149),
  ('continue_instruction -> CONTINUE ;','continue_instruction',2,'p_continue_instruction','Mparser.py',153),
  ('return_instruction -> RETURN operation ;','return_instruction',3,'p_return_instruction','Mparser.py',157),
  ('return_instruction -> RETURN ;','return_instruction',2,'p_return_instruction','Mparser.py',158),
  ('compound_instruction -> { instructions }','compound_instruction',3,'p_compound_instruction','Mparser.py',162),
  ('iterator -> ID = int_or_id : int_or_id','iterator',5,'p_iterator','Mparser.py',166),
  ('int_or_id -> ID','int_or_id',1,'p_int_or_id','Mparser.py',170),
  ('int_or_id -> INT','int_or_id',1,'p_int_or_id','Mparser.py',171),
  ('num -> STRING','num',1,'p_num','Mparser.py',175),
  ('num -> FLOAT','num',1,'p_num','Mparser.py',176),
  ('num -> INT','num',1,'p_num','Mparser.py',177),
  ('bool_expression -> ID','bool_expression',1,'p_bool_expression','Mparser.py',182),
  ('bool_expression -> operation EQUAL operation','bool_expression',3,'p_bool_expression','Mparser.py',183),
  ('bool_expression -> operation < operation','bool_expression',3,'p_bool_expression','Mparser.py',184),
  ('bool_expression -> operation > operation','bool_expression',3,'p_bool_expression','Mparser.py',185),
  ('bool_expression -> operation ISLESSOREQUAL operation','bool_expression',3,'p_bool_expression','Mparser.py',186),
  ('bool_expression -> operation ISMOREOREQUAL operation','bool_expression',3,'p_bool_expression','Mparser.py',187),
  ('bool_expression -> operation ISNOTEQUAL operation','bool_expression',3,'p_bool_expression','Mparser.py',188),
  ('assignment_operation -> ID PLUSEQUAL operation ;','assignment_operation',4,'p_assignment_operation','Mparser.py',195),
  ('assignment_operation -> ID MINUSEQUAL operation ;','assignment_operation',4,'p_assignment_operation','Mparser.py',196),
  ('assignment_operation -> ID MULTIPLEEQUAL operation ;','assignment_operation',4,'p_assignment_operation','Mparser.py',197),
  ('assignment_operation -> ID DIVIDEEQUAL operation ;','assignment_operation',4,'p_assignment_operation','Mparser.py',198),
]
